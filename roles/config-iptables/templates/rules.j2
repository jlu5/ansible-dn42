# This configuration assumes the following:
# - Tunnels to other networks start with "dn42"
# - Tunnels to other nodes in the same network start with "igp"
# - Tunnels to simple clients start with "cl"

{% if aftype == 6 -%}
{% set _dn42_allowed_ips = 'fd00::/8,ff00::/8,fe80::/64' %}
{% else %}
{% set _dn42_allowed_ips = '172.20.0.0/14,10.0.0.0/8,172.31.0.0/16,169.254.0.0/16,224.0.0.0/24' %}
{% endif -%}
-N DN42LOGREJECT
-A DN42LOGREJECT -m limit --limit 5/min -j LOG --log-level 4 --log-prefix "[dn42] REJ "
-A DN42LOGREJECT -j REJECT --reject-with {{ 'adm-prohibited' if aftype == 6 else 'icmp-net-prohibited' }}

-N DN42IPFILTER
-A INPUT -i dn42+ -j DN42IPFILTER
-A INPUT -i igp+ -j DN42IPFILTER
-A INPUT -i cl+ -j DN42IPFILTER
-A OUTPUT -o dn42+ -j DN42IPFILTER
-A OUTPUT -o igp+ -j DN42IPFILTER
-A OUTPUT -o cl+ -j DN42IPFILTER
-A FORWARD -i dn42+ -j DN42IPFILTER
-A FORWARD -i igp+ -j DN42IPFILTER
-A FORWARD -i cl+ -j DN42IPFILTER
-A FORWARD -o dn42+ -j DN42IPFILTER
-A FORWARD -o igp+ -j DN42IPFILTER
-A FORWARD -o cl+ -j DN42IPFILTER

{% set _af_transfer_networks = (transfer_networks | ansible.utils.ipv6 ) if aftype == 6 else (transfer_networks | ansible.utils.ipv4 ) %}
# Disallow our IPs from going through dn42 (peer) interfaces, unless they're a transfer network
{% if _af_transfer_networks %}
-A DN42IPFILTER -s {{ ','.join(_af_transfer_networks) }} -d {{ my_cidrs }} -j RETURN
-A DN42IPFILTER -d {{ ','.join(_af_transfer_networks) }} -s {{ my_cidrs }} -j RETURN
{% endif %}
-A DN42IPFILTER -s {{ my_cidrs }} -i dn42+ -j DN42LOGREJECT
-A DN42IPFILTER -d {{ my_cidrs }} -o dn42+ -j DN42LOGREJECT

# Restrict tunnels to dn42 source and destination IPs
-A DN42IPFILTER -s {{ _dn42_allowed_ips }} -d {{ _dn42_allowed_ips }} -j RETURN
-A DN42IPFILTER -j DN42LOGREJECT

# BGP sessions
-A INPUT -p tcp --dport 179 -i dn42+ -j ACCEPT
-A INPUT -p tcp --dport 179 -i igp+ -j ACCEPT

{# This is dynamically generated because I don't like having larger than needed port ranges open. #}
{# Downside: more coupling in the code here. #}
## WireGuard - IGP links
{% for igp_neighbour in igp_neighbours.get(inventory_hostname, []) | sort %}
{% set igp_wg_port = igp_wg_ports[inventory_hostname][igp_neighbour] %}
# {{ igp_neighbour }}
-A INPUT -p udp --dport {{ igp_wg_port }} -i {{ ansible_default_ipv4.interface | default(ansible_default_ipv6.interface) }} -j ACCEPT
{% endfor %}

{% macro _maybe_forward_rule(conf_block) -%}
{% if conf_block.get('iptables_free_forward') -%}
-A FORWARD -i {{ conf_block.name }} -j ACCEPT
-A FORWARD -o {{ conf_block.name }} -j ACCEPT
{% endif -%}
{% endmacro -%}

## WireGuard peers
{% for wg_peer in wg_peers|default([]) -%}
{%- if wg_peer.get('port') -%}
# {{ wg_peer.name }}
-A INPUT -p udp --dport {{ wg_peer['port'] }} -i {{ ansible_default_ipv4.interface | default(ansible_default_ipv6.interface)}} -j ACCEPT
{% endif -%}
{{ _maybe_forward_rule(wg_peer) }}
{%- endfor %}

{% if gre_peers | default([]) | length > 0 -%}
## GRE peers
-A INPUT -p gre -j ACCEPT
{%- endif %}

## OSPF (internal only)
-A INPUT -p ospf -i igp+ -j ACCEPT

# looking glass proxy (internal only)
-A INPUT -p tcp --dport 5000 -s {{ my_cidrs }} -j ACCEPT

{% if netdata_proxy_port | default(0) -%}
{% set _netdata_v4 = netdata_ips | default([]) | ansible.utils.ipv4 -%}
{% set _netdata_v6 = netdata_ips | default([]) | ansible.utils.ipv6 -%}
{% if _netdata_v4 and aftype == 4 %}
# netdata
-A INPUT -p tcp --dport {{ netdata_proxy_port }} -s {{ ','.join(_netdata_v4) }} -j ACCEPT
{% elif _netdata_v6 and aftype == 6 %}
# netdata
-A INPUT -p tcp --dport {{ netdata_proxy_port }} -s {{ ','.join(_netdata_v6) }} -j ACCEPT
{% endif %}
{% endif %}

# Anycast DNS within dn42
-A INPUT -p udp --dport 53 -i dn42+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i dn42+ -j ACCEPT
-A INPUT -p udp --dport 53 -i igp+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i igp+ -j ACCEPT
-A INPUT -p udp --dport 53 -i cl+ -j ACCEPT
-A INPUT -p tcp --dport 53 -i cl+ -j ACCEPT

# Local bridges for VMs and containers
{% for stub_ifname in stub_ifnames_append | default([]) %}
-A INPUT -p udp --dport 53 -i {{ stub_ifname }} -s {{ my_cidrs }} -j ACCEPT
-A INPUT -p tcp --dport 53 -i {{ stub_ifname }} -s {{ my_cidrs }} -j ACCEPT
-A FORWARD -i {{ stub_ifname }} -s {{ my_cidrs }} -j ACCEPT
-A FORWARD -o {{ stub_ifname }} -d {{ my_cidrs }} -j ACCEPT
{% endfor %}

# Allow forwarding between dn42 and IGP links (after IP sanitization)
-A FORWARD -o dn42+ -j ACCEPT
-A FORWARD -o igp+ -j ACCEPT
# Clients: only allow outgoing connections to the rest of dn42
-A FORWARD -s {{ my_cidrs }} -o cl+ -j ACCEPT
-A FORWARD -o cl+ -m state --state ESTABLISHED,RELATED -j ACCEPT
-A FORWARD -o cl+ -j REJECT

{# Catch all rules are commented out here to prevent clashes with machine-specific rules, but you should enable something like these!
-A INPUT -j DROP
-A FORWARD -j REJECT
#}
